<?xml version="1.0"?>
<launch>

  <arg name="use_sim_time" default="true"/>

  <!-- start up playpen world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find omni_gazebo)/worlds/clearpath_playpen.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <param name="robot_description" command="$(find xacro)/xacro.py '$(find omni_description)/urdf/cheng_rf2o.urdf.xacro'"/>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
  </node>

  <!-- start robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen"/>

  <node name="robot_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -model robot" />

  <!-- Start robot_pose_ekf node -->
  <!--node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="true"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node-->

  <!-- tf2o node -->
  <node pkg="rf2o_laser_odometry" type="rf2o_laser_odometry_node" name="rf2o_laser_odometry" output="screen">
    <!--param name="laser_scan_topic" value="/laser_scan"/-->        # topic where the lidar scans are being published
    <param name="laser_scan_topic" value="/scan"/>        # topic where the lidar scans are being published
    <param name="odom_topic" value="/odom_rf2o" />              # topic where tu publish the odometry estimations
    <!--param name="publish_tf" value="false" /-->                   # wheter or not to publish the tf::transform (base->odom)
    <param name="publish_tf" value="true" />                   # wheter or not to publish the tf::transform (base->odom)
    <param name="base_frame_id" value="/base_link"/>            # frame_id (tf) of the mobile robot base. A tf transform from the laser_frame to the base_frame is mandatory
    <!--param name="base_frame_id" value="/base_footprint"/-->
    <param name="odom_frame_id" value="/odom" />                # frame_id (tf) to publish the odometry estimations    
    <!--param name="init_pose_from_topic" value="/base_pose_ground_truth" /--> # (Odom topic) Leave empty to start at point (0,0)
    <param name="init_pose_from_topic" value=" " /> # (Odom topic) Leave empty to start at point (0,0)
    <param name="freq" value="6.0"/>                            # Execution frequency.
    <param name="verbose" value="true" />                       # verbose
  </node>

  <!-- AMCL -->
  <!--include file="$(find omni_navigation)/launch/mrobot/amcl_ekf.launch"/-->
  <include file="$(find omni_navigation)/launch/mrobot/amcl_rf2o.launch"/>

  <!-- rviz -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find omni_navigation)/rviz/turtlebot3_navigation.rviz"/>

</launch>
